services:
  database:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    container_name: "trip-planner-database"
    restart: unless-stopped
    volumes:
      - db_trip_planner:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - trip_planner_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 40s
      retries: 8

# Microservices
  trip-planner-service-discovery:
    build: ./trip-planner-service-discovery
    ports:
      - "8761:8761"
    container_name: "trip-planner-service-discovery"
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: "America/Sao_Paulo"
    networks:
      - trip_planner_net

  trip-planner-gateway:
    build: ./trip-planner-gateway
    ports:
      - "8080:8080"
    container_name: "trip-planner-gateway"
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: "America/Sao_Paulo"
    networks:
      - trip_planner_net
    depends_on:
      - trip-planner-service-discovery

  trip-planner-user-service:
    build: ./trip-planner-user-service
    ports:
      - "8081:8081"
    container_name: "trip-planner-user-service"
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: "America/Sao_Paulo"
    env_file:
      - path: ./jwt.env
        required: true
    networks:
      - trip_planner_net
    restart: always
    depends_on:
      trip-planner-service-discovery:
        condition: service_started
      trip-planner-gateway:
        condition: service_started
      database:
        condition: service_healthy

  trip-planner-trip-service:
    build: ./trip-planner-trip-service
    ports:
      - "8082:8082"
    container_name: "trip-planner-trip-service"
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: "America/Sao_Paulo"
    networks:
      - trip_planner_net
    restart: always
    depends_on:
      trip-planner-service-discovery:
        condition: service_started
      trip-planner-gateway:
        condition: service_started
      trip-planner-user-service:
        condition: service_started
      kafka:
        condition: service_started
      database:
        condition: service_healthy

  trip-planner-mail-service:
    build: ./trip-planner-mail-service
    ports:
      - "8083:8083"
    container_name: "trip-planner-mail-service"
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: "America/Sao_Paulo"
    networks:
      - trip_planner_net
    restart: always
    depends_on:
      trip-planner-service-discovery:
        condition: service_started
      trip-planner-gateway:
        condition: service_started
      trip-planner-trip-service:
        condition: service_started
      kafka:
        condition: service_started
      mailpit:
        condition: service_healthy

# Kafka
  kafka:
    container_name: "trip-planner-kafka"
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://trip-planner-kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9092:9092"
      - "9094:9094"
    networks:
      - trip_planner_net

  mailpit:
    image: axllent/mailpit
    container_name: "trip-planner-mailpit"
    ports:
      - "8025:8025"
      - "1025:1025"
    restart: unless-stopped
    networks:
      - trip_planner_net

networks:
  trip_planner_net:
    driver: bridge
    name: "trip_planner_net"

volumes:
  db_trip_planner:
    name: "db_trip_planner"